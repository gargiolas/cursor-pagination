name: Generate Documentation and Push Code

on:
  push:
    branches:
      - master

jobs:
  generate-docs:
    runs-on: ubuntu-latest 
    
    steps:
    # Step 1: Checkout del codice
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up .NET SDK (usiamo la versione 6.0, puoi cambiarla se hai una versione diversa)
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '9.0'

    # Step 3: Restore dei pacchetti NuGet
    - name: Restore dependencies
      run: dotnet restore

    # Step 4: Compilazione del progetto (assumiamo che il file .csproj si trovi nella root del progetto)
    - name: Build project
      run: dotnet build

    # Step 5: Generazione della documentazione (usando DocFX o un altro tool)
    - name: Generate Documentation with DocFX
      run: |
        # Se non hai DocFX installato, puoi eseguire il comando per installarlo
        dotnet tool install -g docfx
        docfx init # Se non hai ancora configurato DocFX nel tuo progetto
        docfx build # Genera la documentazione

    # Step 6: Aggiungi la documentazione generata al commit
    - name: Add generated documentation
      run: |
        git add ./_site
        git commit -m "Aggiunta la documentazione generata"
    
    # Step 7: Push delle modifiche al branch main
    - name: Push changes to main
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "giuseppe_argiolas@outlook.it"
        git push
